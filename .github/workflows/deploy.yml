name: Deploy VPN App To VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci --only=production
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Stop existing services
          pm2 stop vpn-backend || true
          
          # Backup current deployment
          sudo rm -rf /var/www/vpn-backup
          sudo mv /var/www/vpn /var/www/vpn-backup || true
          
          # Create new directory
          sudo mkdir -p /var/www/vpn
          sudo chown $USER:$USER /var/www/vpn
    
    - name: Copy files to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "backend/*,frontend/dist/*"
        target: "/var/www/vpn/"
        strip_components: 0
    
    - name: Start Services
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /var/www/vpn/backend
          npm install --only=production
          
          # Start backend with PM2
          pm2 start server.js --name vpn-backend
          pm2 save
          
          # Copy frontend files to nginx directory
          sudo cp -r ../frontend/dist/* /var/www/html/
          sudo systemctl reload nginx